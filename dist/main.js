/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/scripts/index.js":
/*!*********************************!*\
  !*** ./public/scripts/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Author: Bryan Wong\n * https://github.com/bryanwyk\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar shared_1 = __webpack_require__(/*! ./shared */ \"./public/scripts/shared.js\");\nvar $CHAP_ITEMS = document.querySelector('.chapters__items'), $CHAP_LEFT = document.querySelectorAll('.chapters__item--left'), $CHAP_RIGHT = document.querySelectorAll('.chapters__item--right'), $CHAP_HEADER = document.querySelector('.chapters__header'), $CTA_ARROW = document.querySelector('.scroll-cta__arrow'), $CTA_BUTTON = document.querySelector('.scroll-cta__button'), $HERO_SECTION = document.querySelector('.hero-section'), $HERO_TEXT = document.querySelector('.hero-section__text'), $INTRO = document.querySelector('.presentation-section__intro'), $LATEST_EVENTS = document.querySelector('.presentation-section__latest-events'), $MAIN_NAV_ITEMS = document.querySelectorAll('.main-nav__item-text'), $SLIDESHOW_SLIDES = document.querySelectorAll('.slideshow__slide'), $SLIDESHOW_TABS = document.querySelectorAll('.slideshow__tab');\nvar SCROLL_Y_BREAKPOINTS = [130, 480, 620, 775, 840, 1060, 1280, 1450];\nif (window.matchMedia(\"(min-width: 750px)\").matches) {\n    SCROLL_Y_BREAKPOINTS[7] = 820;\n}\nvar heroHidden = false;\nvar displayedSlideIndex = 0; // Index corresponds to the current slide being displayed in the hero section.\nvar slideTimerID;\n/**\n * initIndex calls the methods that initialise scroll animations and the hero slideshow.\n */\nvar initIndex = function () {\n    window.onscroll = function () {\n        initOnScrollContentAnimations();\n        initOnScrollHeaderAnimations();\n    };\n    initHeroSlideshow();\n};\n/**\n * initHeroSlideshow initialises the hero slideshow and sets the relevant event listeners to the slideshow tabs.\n */\nvar initHeroSlideshow = function () {\n    var _loop_1 = function (i) {\n        $SLIDESHOW_TABS[i].addEventListener('click', function () {\n            // Set the slide index to the slide that has been clicked on.\n            displayedSlideIndex = i;\n            // Initially remove all slides from display\n            for (var j = 0; j < $SLIDESHOW_SLIDES.length; j++) {\n                var slide = $SLIDESHOW_SLIDES[j];\n                var slideTab = $SLIDESHOW_TABS[j];\n                slide.style.opacity = '0';\n                slideTab.classList.remove('slideshow__tab--active');\n            }\n            // Display the slide image corresponding to the clicked tab.\n            var displayedSlide = $SLIDESHOW_SLIDES[displayedSlideIndex];\n            var displayedSlideTab = $SLIDESHOW_TABS[displayedSlideIndex];\n            displayedSlide.style.opacity = '1';\n            displayedSlideTab.classList.add('slideshow__tab--active');\n            displayedSlideIndex++;\n            // Reset the slide intervals so e.g. if we were previously on slide 3, and then click on slide 1, it does not \n            // then change the slide to 4\n            resetSlideInterval();\n        });\n    };\n    // Add event listeners to slide tabs to make them clickable\n    for (var i = 0; i < $SLIDESHOW_TABS.length; i++) {\n        _loop_1(i);\n    }\n    // Play initial slide first, and make its tab active.\n    var displayedSlide = $SLIDESHOW_SLIDES[displayedSlideIndex];\n    var displayedSlideTab = $SLIDESHOW_TABS[displayedSlideIndex];\n    displayedSlide.style.opacity = '1';\n    displayedSlideTab.classList.add('slideshow__tab--active');\n    displayedSlideIndex++;\n    // Every interval, display the next slide, and make its respective tab active.\n    // let slideTimerID = setInterval(() => {\n    //     if (displayedSlideIndex === $SLIDESHOW_SLIDES.length) {\n    //         displayedSlideIndex = 0;\n    //     }\n    //     for (let i=0; i<$SLIDESHOW_SLIDES.length; i++) {\n    //         $SLIDESHOW_SLIDES[i].style.opacity = 0;\n    //         $SLIDESHOW_TABS[i].classList.remove('slideshow__tab--active');\n    //     }\n    //     $SLIDESHOW_SLIDES[displayedSlideIndex].style.opacity = 1;\n    //     $SLIDESHOW_TABS[displayedSlideIndex].classList.add('slideshow__tab--active');\n    //     displayedSlideIndex ++;\n    // }, 8000);\n    resetSlideInterval();\n};\n/**\n *  resetSlideInterval resets the slide interval responsible for changing the slide displayed in the slideshow to\n *  the next.\n */\nvar resetSlideInterval = function () {\n    // Reset the interval timer\n    if (slideTimerID) {\n        clearInterval(slideTimerID);\n    }\n    // Set the interval timer so that the next slide is shown\n    slideTimerID = setInterval(function () {\n        // If the displayed slide is the last one, set the first slide to be next to display\n        if (displayedSlideIndex === $SLIDESHOW_SLIDES.length) {\n            displayedSlideIndex = 0;\n        }\n        for (var i = 0; i < $SLIDESHOW_SLIDES.length; i++) {\n            var slide = $SLIDESHOW_SLIDES[i];\n            var slideTab = $SLIDESHOW_TABS[i];\n            slide.style.opacity = '0';\n            slideTab.classList.remove('slideshow__tab--active');\n        }\n        var displayedSlide = $SLIDESHOW_SLIDES[displayedSlideIndex];\n        var displayedSlideTab = $SLIDESHOW_TABS[displayedSlideIndex];\n        displayedSlide.style.opacity = '1';\n        displayedSlideTab.classList.add('slideshow__tab--active');\n        displayedSlideIndex++;\n    }, 8000);\n};\n/**\n * initOnScrollContentAnimations initialises animations to occur on the contents of the page (excluding the header)\n * e.g. content to appear as the user scrolls down past a specific breakpoint.\n */\nvar initOnScrollContentAnimations = function () {\n    /*\n    As the user scrolls past the 1st breakpoint:\n        - The hero text should fade out.\n        - The intro-section text should fade in.\n    As the user scrolls back to before this breakpoint, elements should return to their initial state.\n    */\n    if (window.scrollY > SCROLL_Y_BREAKPOINTS[0]) {\n        $HERO_TEXT.style.opacity = (1 - (window.scrollY / 250)).toString();\n        $CTA_ARROW.style.opacity = '0';\n        $CTA_BUTTON.style.opacity = (1 - (window.scrollY / 700)).toString();\n        $INTRO.classList.remove('fade-hide');\n        $INTRO.classList.add('fade-reveal');\n    }\n    else {\n        $HERO_TEXT.style.opacity = '1';\n        $CTA_ARROW.style.opacity = '1';\n        $CTA_BUTTON.style.opacity = '1';\n    }\n    /*\n    As the user scrolls past the 2nd breakpoint:\n        - The call to action button in the hero section should fade out.\n        - The hero image should fade out.\n        - The chapter section text should fade in.\n    */\n    if (window.scrollY > SCROLL_Y_BREAKPOINTS[1]) {\n        $CHAP_HEADER.classList.add('fade-reveal');\n        heroHidden = true;\n        if (window.matchMedia(\"(min-width: 750px\").matches) {\n            $CHAP_ITEMS.classList.add('fade-reveal');\n        }\n    }\n    else {\n        // As the user scrolls back to before this breakpoint, these elements should return to their initial state.\n        heroHidden = false;\n    }\n    /*\n        As the user scrolls past the 3rd breakpoint:\n            - The first chapter should slide in from the left.\n        As the user scrolls back to before this breakpoint, the chapter item should stay in its final state.\n    */\n    if (window.scrollY > SCROLL_Y_BREAKPOINTS[2]) {\n        var chapter = $CHAP_LEFT[0];\n        chapter.classList.add('slide-in');\n    }\n    /*\n        As the user scrolls past the 4th breakpoint:\n            - The second chapter should slide in from the right.\n        As the user scrolls back to before this breakpoint, the chapter item should stay in its final state.\n    */\n    if (window.scrollY > SCROLL_Y_BREAKPOINTS[3]) {\n        $HERO_SECTION.style.opacity = '0';\n        $HERO_SECTION.style.pointerEvents = 'none';\n    }\n    else {\n        $HERO_SECTION.style.opacity = '1';\n        $HERO_SECTION.style.pointerEvents = 'auto';\n    }\n    /*\n        As the user scrolls past\n    */\n    if (window.scrollY > SCROLL_Y_BREAKPOINTS[7]) {\n        $LATEST_EVENTS.classList.add('fade-reveal');\n    }\n    if (window.matchMedia(\"(max-width: 750px)\").matches) {\n        if (window.scrollY > SCROLL_Y_BREAKPOINTS[4]) {\n            var chapter = $CHAP_RIGHT[0];\n            chapter.classList.add('slide-in');\n        }\n        /*\n            As the user scrolls past the 5th breakpoint:\n                - The third chapter should slide in from the left.\n            As the user scrolls back to before this breakpoint, the chapter item should stay in its final state.\n        */\n        if (window.scrollY > SCROLL_Y_BREAKPOINTS[5]) {\n            var chapter = $CHAP_LEFT[1];\n            chapter.classList.add('slide-in');\n        }\n        /*\n        As the user scrolls past the 6th breakpoint:\n            - The fourth chapter should slide in from the left.\n        As the user scrolls back to before this breakpoint, the chapter item should stay in its final state.\n    */\n        if (window.scrollY > SCROLL_Y_BREAKPOINTS[6]) {\n            var chapter = $CHAP_RIGHT[1];\n            chapter.classList.add('slide-in');\n        }\n    }\n};\n/**\n * initOnScrollHeaderAnimations initialises animations of the header DOM elements that are to occur as the user scrolls vertically (y-axis) on the web-page.\n * When the user scrolls past the hero section, the brand should change to the original (from the alternate) logo, and the toggle button should change from white to grey.\n * As the user scrolls back to the hero section, the brand and toggle button should revert to their initial states.\n*/\nvar initOnScrollHeaderAnimations = function () {\n    // If the hero section is hidden (i.e. has been scrolled past), and the user has NOT clicked the menu toggle button (i.e. mobile menu is not open)\n    if (heroHidden && !shared_1.toggleBtnClicked) {\n        // Turn header background white\n        shared_1.$MAIN_HEADER.classList.remove('main-header--transparent');\n        shared_1.$MAIN_HEADER.classList.add('header__element--white');\n        // Replace alternate logo with original logo that does not have hover effects.\n        shared_1.$LOGO_ALT.classList.remove('image_on');\n        shared_1.$LOGO_ALT.classList.add('brand-alt-hover--disable');\n        shared_1.$LOGO.classList.remove('image_off');\n        shared_1.$LOGO.classList.add('brand-hover--disable');\n        // Make toggle button bars grey\n        for (var i = 0; i < shared_1.$TOGGLE_BTN_BARS.length; i++) {\n            var bar = shared_1.$TOGGLE_BTN_BARS[i];\n            bar.classList.remove('header__element--white');\n            bar.classList.add('header__element--grey');\n        }\n        ;\n        // Make main nav words black\n        for (var i = 0; i < $MAIN_NAV_ITEMS.length; i++) {\n            var item = $MAIN_NAV_ITEMS[i];\n            item.classList.remove('main-nav__item-text--alt');\n            item.classList.add('main-nav__item-text--original');\n        }\n        ;\n    }\n    // If the hero section is NOT hidden (i.e. has been scrolled past), and the user has NOT clicked the menu toggle button (i.e. mobile menu is not open)\n    if (!heroHidden && !shared_1.toggleBtnClicked) {\n        // Turn header background transparent\n        shared_1.$MAIN_HEADER.classList.remove('header__element--white');\n        shared_1.$MAIN_HEADER.classList.add('main-header--transparent');\n        // Replace original logo with alternate (white-only) logo that has hover effects.\n        shared_1.$LOGO.classList.remove('brand-hover--disable');\n        shared_1.$LOGO.classList.add('image_off');\n        shared_1.$LOGO_ALT.classList.remove('brand-alt-hover--disable');\n        shared_1.$LOGO_ALT.classList.add('image_on');\n        // Make toggle button bars white\n        for (var i = 0; i < shared_1.$TOGGLE_BTN_BARS.length; i++) {\n            var bar = shared_1.$TOGGLE_BTN_BARS[i];\n            bar.classList.remove('header__element--grey');\n            bar.classList.add('header__element--white');\n        }\n        ;\n        // Make main nav words white\n        for (var i = 0; i < $MAIN_NAV_ITEMS.length; i++) {\n            var item = $MAIN_NAV_ITEMS[i];\n            item.classList.add('main-nav__item-text--alt');\n            item.classList.remove('main-nav__item-text--original');\n        }\n        ;\n    }\n};\ninitIndex();\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://vsa-vic-clone/./public/scripts/index.js?");

/***/ }),

/***/ "./public/scripts/shared.js":
/*!**********************************!*\
  !*** ./public/scripts/shared.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Author: Bryan Wong\n * https://github.com/bryanwyk\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.$TOGGLE_BTN_BARS = exports.$LOGO = exports.$LOGO_ALT = exports.$MAIN_HEADER = exports.toggleBtnClicked = void 0;\nvar $BODY = document.querySelector('body'), $LOGO = document.querySelector('#logo'), $LOGO_ALT = document.querySelector('#logo--alt'), $MAIN_HEADER = document.querySelector('.main-header'), $MOBILE_NAV = document.querySelector('.mobile-nav'), $MOBILE_NAV_BG = document.querySelector('.mobile-nav__background'), $MOBILE_NAV_ITEM = document.querySelectorAll('.mobile-nav__item'), $MOBILE_NAV_ITEMS_LIST = document.querySelector('.mobile-nav__items'), $MOBILE_NAV_SOCIAL_MEDIA = document.querySelector('#mobile-nav__social-media'), $TOGGLE_BTN = document.querySelector('.toggle-button'), $TOGGLE_BTN_BARS = document.querySelectorAll('.toggle-button__bar'), $COPYRIGHT_YEAR = document.querySelector('#copyright-year');\nexports.$LOGO = $LOGO;\nexports.$LOGO_ALT = $LOGO_ALT;\nexports.$MAIN_HEADER = $MAIN_HEADER;\nexports.$TOGGLE_BTN_BARS = $TOGGLE_BTN_BARS;\nvar toggleBtnClicked = false;\nexports.toggleBtnClicked = toggleBtnClicked;\n/**\n * initSharedElements initialises elements shared in all pages (e.g. header and footer).\n */\nvar initSharedElements = function () {\n    // Initialise header mobile nav bar\n    initToggleBtn();\n    // Initialise footer copyright year\n    var currentYear = new Date().getFullYear();\n    $COPYRIGHT_YEAR.textContent = currentYear.toString();\n};\n/**\n * isOnPage returns whether or not the user is currently on a given html file (e.g. index.html)\n * @arg HTMLFileNameString - the name of the file as a string\n * @return true - the user is on the given page\n * @return false - the user is not on the given page\n*/\nvar isOnPage = function (HTMLFileNameString) {\n    var path = window.location.pathname; // Returns the path of the file\n    var page = path.split(\"/\").pop(); // Splits path of file into an array of substrings where '/' is located, and pop last substring which is the name of the html file\n    if (page === HTMLFileNameString) {\n        return true;\n    }\n    return false;\n};\n/**\n * initToggleBtn initialises the on-click event listeners for the toggle button, which enables users to open or close a mobile menu navigation bar.\n */\nvar initToggleBtn = function () {\n    $TOGGLE_BTN.addEventListener('click', function () {\n        // If the toggle button is clicked to open the mobile menu\n        if (!toggleBtnClicked) {\n            openMobileMenu();\n            openToggleAnimation();\n            exports.toggleBtnClicked = toggleBtnClicked = true;\n        }\n        // If the toggle button is clicked to close the mobile menu\n        else {\n            closeMobileMenu();\n            closeToggleAnimation();\n            exports.toggleBtnClicked = toggleBtnClicked = false;\n        }\n    });\n};\n/**\n * openMobileMenu reveals the mobile navigation bar containing hyperlinks to other web-pages.\n*/\nvar openMobileMenu = function () {\n    var timeOutDelay = 100;\n    // Make the nav bar visible by adding class 'mobile-nav__open'\n    $MOBILE_NAV.classList.add('mobile-nav__open');\n    // Execute transition in of menu background AFTER the mobile-nav's display is changed from 'none' (otherwise it will not execute).\n    setTimeout(function () {\n        $MOBILE_NAV_BG.classList.add('mobile-nav__background--open');\n        if (isOnPage('index.html')) {\n            // Replace alternate logo with original logo that does not have hover effects.\n            $LOGO_ALT.classList.remove('image_on');\n            $LOGO_ALT.classList.add('brand-alt-hover--disable');\n            $LOGO.classList.remove('image_off');\n            $LOGO.classList.add('brand-hover--disable');\n        }\n        // Trigger transition in of menu items.\n        $MOBILE_NAV_ITEMS_LIST.classList.add('mobile-nav__items--reveal');\n        $MOBILE_NAV_SOCIAL_MEDIA.classList.add('mobile-nav__items--reveal');\n    }, timeOutDelay);\n    // To prevent scrolling on the body while the mobile menu is open. This will also cause the page to automatically scroll to the top.\n    $BODY.style.position = 'fixed';\n};\n/**\n * Resets the colours and state of the header and its elements as it was at the top of the page.\n */\nvar resetHeader = function () {\n    // Turn header background transparent\n    $MAIN_HEADER.classList.add('main-header--transparent');\n    $MAIN_HEADER.classList.remove('header__element--white');\n    // Add alternate (white) logo\n    $LOGO_ALT.classList.remove('brand-alt-hover--disable');\n    $LOGO_ALT.classList.add('image_on');\n    $LOGO.classList.remove('brand-hover--disable');\n    $LOGO.classList.add('image_off');\n};\n/**\n * closeMobileMenu hides the mobile navigation bar.\n*/\nvar closeMobileMenu = function () {\n    var timeOutDelay = 500;\n    // Execute transition that hides the links.\n    $MOBILE_NAV_ITEMS_LIST.classList.remove('mobile-nav__items--reveal');\n    $MOBILE_NAV_SOCIAL_MEDIA.classList.remove('mobile-nav__items--reveal');\n    // Execute transition that hides the mobile menu background.\n    $MOBILE_NAV_BG.classList.remove('mobile-nav__background--open');\n    // If we are on index.html page, reset the header\n    if (isOnPage('index.html')) {\n        resetHeader();\n    }\n    // AFTER the transitions are done, remove the mobile menu\n    setTimeout(function () {\n        // Set display of the mobile nav-bar menu to 'none'\n        $MOBILE_NAV.classList.remove('mobile-nav__open');\n    }, timeOutDelay);\n    // Make body scroll-able again.\n    $BODY.style.position = 'static';\n};\n/**\n * openToggleAnimation executes animation of toggle button menu hamburger turning into 'x' exit button.\n */\nvar openToggleAnimation = function () {\n    for (var i = 0; i < $TOGGLE_BTN_BARS.length; i++) {\n        var toggleBtnBar = $TOGGLE_BTN_BARS[i];\n        toggleBtnBar.classList.add('header__element--grey');\n        toggleBtnBar.classList.remove('header__element--white');\n        toggleBtnBar.classList.add(\"toggle-button__bar-\" + (i + 1) + \"--clicked\");\n    }\n};\n/**\n * closeToggleAnimation executes animation of 'x' exit button turning into toggle button menu hamburger.\n */\nvar closeToggleAnimation = function () {\n    var timeOutDelay = 500;\n    // Change toggle buttons back to white only if on index page.\n    for (var i = 0; i < $TOGGLE_BTN_BARS.length; i++) {\n        var toggleBtnBar = $TOGGLE_BTN_BARS[i];\n        if (isOnPage('index.html')) {\n            toggleBtnBar.classList.remove('header__element--grey');\n            toggleBtnBar.classList.add('header__element--white');\n        }\n        toggleBtnBar.classList.remove(\"toggle-button__bar-\" + (i + 1) + \"--clicked\");\n        toggleBtnBar.classList.add(\"toggle-button__bar-\" + (i + 1) + \"--clicked-off\");\n    }\n    // Remove animation classes after animations are complete\n    setTimeout(function () {\n        var toggleBtnBar = $TOGGLE_BTN_BARS[i];\n        for (var i = 0; i < $TOGGLE_BTN_BARS.length; i++) {\n            toggleBtnBar.classList.remove(\"toggle-button__bar-\" + (i + 1) + \"--clicked-off\");\n        }\n    }, timeOutDelay);\n};\n// Remove mobile nav menu if window resized to bigger than mobile view\nwindow.addEventListener(\"resize\", function () {\n    if (window.innerWidth > 750) {\n        closeMobileMenu();\n        closeToggleAnimation();\n        exports.toggleBtnClicked = toggleBtnClicked = false;\n    }\n});\ninitSharedElements();\n//# sourceMappingURL=shared.js.map\n\n//# sourceURL=webpack://vsa-vic-clone/./public/scripts/shared.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/scripts/index.js");
/******/ 	
/******/ })()
;